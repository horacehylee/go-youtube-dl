// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package decipher

import (
	"io"
	"sync"
)

var (
	lockyoutubeClientMockPlayerJS sync.RWMutex
)

// Ensure, that youtubeClientMock does implement youtubeClient.
// If this is not the case, regenerate this file with moq.
var _ youtubeClient = &youtubeClientMock{}

// youtubeClientMock is a mock implementation of youtubeClient.
//
//     func TestSomethingThatUsesyoutubeClient(t *testing.T) {
//
//         // make and configure a mocked youtubeClient
//         mockedyoutubeClient := &youtubeClientMock{
//             PlayerJSFunc: func(videoID string) (io.ReadCloser, error) {
// 	               panic("mock out the PlayerJS method")
//             },
//         }
//
//         // use mockedyoutubeClient in code that requires youtubeClient
//         // and then make assertions.
//
//     }
type youtubeClientMock struct {
	// PlayerJSFunc mocks the PlayerJS method.
	PlayerJSFunc func(videoID string) (io.ReadCloser, error)

	// calls tracks calls to the methods.
	calls struct {
		// PlayerJS holds details about calls to the PlayerJS method.
		PlayerJS []struct {
			// VideoID is the videoID argument value.
			VideoID string
		}
	}
}

// PlayerJS calls PlayerJSFunc.
func (mock *youtubeClientMock) PlayerJS(videoID string) (io.ReadCloser, error) {
	if mock.PlayerJSFunc == nil {
		panic("youtubeClientMock.PlayerJSFunc: method is nil but youtubeClient.PlayerJS was just called")
	}
	callInfo := struct {
		VideoID string
	}{
		VideoID: videoID,
	}
	lockyoutubeClientMockPlayerJS.Lock()
	mock.calls.PlayerJS = append(mock.calls.PlayerJS, callInfo)
	lockyoutubeClientMockPlayerJS.Unlock()
	return mock.PlayerJSFunc(videoID)
}

// PlayerJSCalls gets all the calls that were made to PlayerJS.
// Check the length with:
//     len(mockedyoutubeClient.PlayerJSCalls())
func (mock *youtubeClientMock) PlayerJSCalls() []struct {
	VideoID string
} {
	var calls []struct {
		VideoID string
	}
	lockyoutubeClientMockPlayerJS.RLock()
	calls = mock.calls.PlayerJS
	lockyoutubeClientMockPlayerJS.RUnlock()
	return calls
}
